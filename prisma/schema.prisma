generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String?       @unique
  password       String?
  image          String?
  highlights     String
  emailVerified  DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  stripeCustomerId String?

  accounts       Account[]
  Combo          Combo[]
  sessions       Session[]
  favoriteCombos Favorite[]
  comments       Comment[]
  likedCombos    Like[]
  commentLikes   CommentLike[]
  commentReplies Replies[]
  repliesLikes   ReplyLike[]
}

model Comment {
  id        String        @id @default(cuid())
  userId    String
  comboId   String
  text      String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  likes     CommentLike[]
  replies   Replies[]

  combo Combo @relation(fields: [comboId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Replies {
  id        String      @id @default(cuid())
  parentId  String
  userId    String
  comboId   String
  text      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  likes     ReplyLike[]

  parent Comment @relation(fields: [parentId], references: [id], onDelete: Cascade)
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Favorite {
  id        String   @id @default(cuid())
  comboId   String
  userId    String
  createdAt DateTime @default(now())
  combo     Combo    @relation(fields: [comboId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([comboId, userId])
}

model CommentLike {
  id        String   @id @default(cuid())
  commentId String
  userId    String
  createdAt DateTime @default(now())

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
}

model ReplyLike {
  id        String   @id @default(cuid())
  replyId   String
  userId    String
  createdAt DateTime @default(now())

  replies Replies? @relation(fields: [replyId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([replyId, userId])
}

model Like {
  id        String   @id @default(cuid())
  comboId   String
  userId    String
  createdAt DateTime @default(now())
  combo     Combo    @relation(fields: [comboId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([comboId, userId])
}

model Combo {
  id               String         @id @default(cuid())
  slug             String         @unique
  userId           String
  highlight        comboHighlight @default(NONE)
  difficulty       String
  combotitle       String
  combodescription String
  fightingstyle    String
  fruit            String
  sword            String
  weapon           String
  specialty        String
  race             String
  mainStats        String
  comboVideo       String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes            Like[]
  favorites        Favorite[]
  comments         Comment[]
}

enum comboHighlight {
  NONE
  HIGHLIGHTED
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
